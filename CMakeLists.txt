PROJECT(demo)
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
SET (Tutorial_VERSION_MAJOR 1)
SET (Tutorial_VERSION_MINOR 0)
IF(CMAKE_SYSTEM_NAME MATCHES "Linux")
SET (VERSION_MAJOR 1)
SET (VERSION_MINOR 0)
#configure_file (
#  "${PROJECT_SOURCE_DIR}/common/config.h.in"
#  "${PROJECT_BINARY_DIR}/common/config.h"
#  )
#set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,-Bsymbolic")
ELSE()
ENDIF()

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb -std=c++2a -fno-strict-aliasing -Wno-register")
SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall -std=c++2a -fno-strict-aliasing -Wno-register")
SET(CMAKE_BUILD_TYPE "Release")

FIND_PACKAGE(Boost REQUIRED COMPONENTS log)
IF(NOT Boost_FOUND)
    MESSAGE("Can not find Boost")
ENDIF()


ADD_DEFINITIONS(-DBOOST_SPIRIT_THREADSAFE)
ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)

INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})

INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/include")

EXECUTE_PROCESS(COMMAND protoc 
    -I=${PROJECT_SOURCE_DIR}/demo/proto 
    -I=${PROJECT_SOURCE_DIR}/common/interface 
    --cpp_out=${PROJECT_BINARY_DIR}/
    ${PROJECT_SOURCE_DIR}/demo/proto/demo.proto)
EXECUTE_PROCESS(COMMAND protoc 
    -I=${PROJECT_SOURCE_DIR}/demo/proto 
    -I=${PROJECT_SOURCE_DIR}/common/interface 
    --cpp_out=${PROJECT_BINARY_DIR}/
    ${PROJECT_SOURCE_DIR}/common/interface/gcontrol.proto)

FIND_PACKAGE(Protobuf REQUIRED)
INCLUDE_DIRECTORIES(${Protobuf_INCLUDE_DIRS})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})

SET(IGNORE_COMMON 0)
ADD_SUBDIRECTORY(ghead)
ADD_SUBDIRECTORY(gpendingpool)
ADD_SUBDIRECTORY(common/util)
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/gpendingpool/include")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/ghead/include")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/common/util/include")
INCLUDE_DIRECTORIES("${PROJECT_BINARY_DIR}")


add_subdirectory(../../.. ${CMAKE_CURRENT_BINARY_DIR}/grpc EXCLUDE_FROM_ALL)
ADD_EXECUTABLE(demo 
"${PROJECT_SOURCE_DIR}/demo/demo.cpp" 
"${PROJECT_BINARY_DIR}/demo.pb.cc" 
"${PROJECT_BINARY_DIR}/gcontrol.pb.cc" 
)

TARGET_LINK_LIBRARIES(demo gpendingpool ghead common ${Protobuf_LIBRARIES})